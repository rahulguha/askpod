 All right, this is how to use the whisper API to transcribe a YouTube video. We're gonna just run this Hit command shift or control shift if you're on a PC and this is gonna install open AI That's one of the things we need. We're also going to run This as well. This is YouTube DLP This is like YouTube DL if you guys have used that before But I found that it's more up to date more frequently and YouTube occasionally changes the way that they stream and that breaks YouTube DL I just found this Works, but you can also try YouTube DL works in a very similar way So I'm just gonna download this YouTube video. This one is mine. I am the copyright for this So I would say if you don't earn the copyright for your video that you're downloading Just be careful because you might be restricted in what you can do But it depends on the use case that you use in the transcripts for in our case What we're doing is we're taking the YouTube video that I have and we're just creating a transcript And we could use that transcript to post and promote the YouTube video itself So while this is downloading this is basically just streaming and then capturing the fragments I'm just gonna click here to go to open AI We need to get an API key. So we're gonna create a new secret key. I'm just gonna call this Whisper I'm gonna delete this afterwards because you shouldn't share your API keys cool, so It looks like this is downloaded and actually if we look in our file system, yeah, we can see this the video here So now let's set up our API key just gonna run this and then we can just paste it in there And that kind of saves it in the opening AI library and now we need to sort of have this video And it's web M format so we're gonna use FFM peg which is a library for basically just Changing or manipulating video audio files and we're gonna use this I'm gonna take in this video and then output it as like an mp3 so you can get this file name Just paste this in here Hopefully that runs Okay, yeah, so this not running I think because this name is a little bit funny, so let's just call this input.webM And then we'll just change this here Input dot Web M All right And this is basically just converting the video format and stripping out just the mp3 like they're just the audio All right, so that's done and actually for you fresh we can see this output mp3 here and Now we're gonna call the whisper API. So this is the easy part I've asked it for the verbose JSON by default. It just gives you back the transcript But this will give you all the different segments of the transcript. So just gonna run this you'll see what I mean And there is a cost this that's very cheap though Negligible like pennies even for relatively long audio shouldn't be too much of an issue But keep on top of your cost caps Make sure that you don't rack up too much of a fee if you're doing this for lots of different podcast or audio Wait for this to run Oh, here we go now, it's finished and look it's a pretty big file. So you can see It's broken into these chunks, right? We have the The start time and time the actual text and then even the tokens and the log probability This is like a lot of information. We don't need all of this information We can actually just get the text itself. So if we Try this. Yeah, here we go So this is the full text and I can click there to expand it the full text of the video That's the full transcript But this doesn't have any time stamps what I wanted to show you is how to kind of split out the time stamps themselves So I've gone through the segments. So it's four segment in transcript segments And then I'm un-buddling the start minutes and start seconds. I'm using this div mod It's basically just divides the start number by 60 to get the number of minutes and then the number of seconds afterwards So that'd be how many seconds I left over after you divided and then I'm creating a timestamp. So if I just run this you'll be able to see here we go So the timestamp is I formatted it. So there's always like a prevailing zero Even if the minutes if it even if it's won't let you listen one minute For example, and same thing with the seconds as well Just to make the formatting more consistent and there we go We have kind of line by line Transcript with the seconds in the minutes All right, this is a lot you can do with this I think you can do real-time streaming as well It is open source as well as available via API So you could run this locally if you have this setup on your server with a GPU But I think it's easier and relatively cheap to use the API And now you can transcribe any audio you want I would say that one thing I would watch out for is that it's not particularly good When you have more than one speaker, so I found it tends to work best for like tutorials or podcasts things where there's just one speaker at a time typically